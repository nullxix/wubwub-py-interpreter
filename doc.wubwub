print ; print ;
print  _________________________________________________ ;
print ;
print  - - - - - - DOCUMENTATION STARTS HERE - - - - - - ;
print  _________________________________________________ ;
print ; print ;
print ------------ WELCOME TO WUBWUB ------------- ;
print -------------- MWAHAHAHAHAHA -------------- ;
print ;
print In wubwub, everything is a function ;
print much how in Javascript, everything is an object ;
print ;
print and when we say everything, we mean EVERYTHING ;
print ;
print - - - - - - Calling Functions - - - - - - ;
print ;
print functions are called by writing their name ;
print ;
print for example: ;
print the 'bark' function prints 'Woof!' to the console ;
print we call it like this ;
print ;
print bark ;
print ;
print there is no additional syntax; just bark ;
print you can declare your own functions using the def function ;
print ;
print the first token after def will be the name of the new function ;
print everything after that until the first ';;' token will be stored ;
print as code to be run by the function ;
print ;
print for example: ;
print we can create a growl function that barks twice ;
print ;
print def growl ;
print bark bark ;
;; out
print ;
print ;
print due to the limitations of the print function which this doc uses ;
print we cannot print a ";;" without double quotes ;
print I'm sure you have a good imagination and can pretend they aren't there ;
print ;
print now that we have defined this function, we can call it like this ;
print ;
print growl ;
print ;
print this function will print 'Woof!' to the console twice ;
print ;
print ;
print - - - - - - - functions part II - - - - - - - - - ;
print ;
print when a function is defined, it is added to a table of functions ;
print this does not overwrite any functions with the same name ;
print ;
print when a token is read from the script, the stack is read from top to bottom ;
print (most recently defined first) ;
print and the first function to match the token is executed ;
print ;
print if a token does not match any functions in the table ;
print it is pushed to the stack ;
print ;
print the stack is a stack of data ;
print ;
print tokens can explicity be put on the stack ;
print using the -> function ;
print ;
print -> thing ;
print ;
print this puts 'thing' on the stack ;
print ;
print we can pull the top item from the stack using the <- function ;
print ;
print <- potato ;
print ;
print the <- function has defined a new function 'potato' ;
print with the top item of the stack as its contents ;
print (in this case thing) ;
print ;
print if we def a new function 'thing' ;
print calling potato will now call that function ;
print ;
print def thing ;
print bark bark bark ;
;; out
print ;
print ;
print if we now call potato ;
print ;
print potato ;
print ;
print we will see 'Woof!' printed to the console 3 times ;
print this is because the potato function, internally, ;
print simply contains the thing function ;
print ;
print ;
print ------------------------------------------------- ;
print - - - - - - - - CORE FUNCTIONS - - - - - - - - - - ;
print ------------------------------------------------- ;
print ;
print barking is fun, but we want more from life ;
print here are some more functions to play with ;
print ;
print undef x ;
print removes the first x function from the function table ;
print think of it as a delete function function ;
print undef is greatly feared in the wolrd of functions ;
print ;
print sum x ;
print pops x items from the stack, adds them together, and pushes the total ;
print ;
print mult x ;
print pops x items from the stack, multiplies them, and pushes the total ;
print print x... ';' ;
print prints every token until it sees a ';' or ';;' token ;
print this does not evaluate functions ;
print ;
print out ;
print sends a copy of the top item in the stack to standard output ;
print ;
print outx x ;
print print copy of item x steps from top of the stack ;
print outx 0 will print the top item from the stack ;
print ;
print because all bugs should be features ;
print instead of throwing exceptions ;
print many functions will instead do esoteric yet useful things ;
print such as printing a space ' ' to standard output ;
print ; print ;
print _________________________________________________ ;
print ;
print ^^^^^^^^^ documentation starts at top ^^^^^^^^^^^ ;
print _________________________________________________ ;
print ;
